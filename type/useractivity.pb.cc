// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssigmaapi/type/useractivity.proto

#include "ssigmaapi/type/useractivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyboardInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MouseInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ApplicationWindow;
}  // namespace protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto
namespace ssigmaapi {
namespace type {
class UserActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserActivity>
      _instance;
} _UserActivity_default_instance_;
class KeyboardInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyboardInput>
      _instance;
} _KeyboardInput_default_instance_;
class MouseInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MouseInput>
      _instance;
} _MouseInput_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class ApplicationWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApplicationWindow>
      _instance;
} _ApplicationWindow_default_instance_;
}  // namespace type
}  // namespace ssigmaapi
namespace protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto {
static void InitDefaultsUserActivity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::type::_UserActivity_default_instance_;
    new (ptr) ::ssigmaapi::type::UserActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::type::UserActivity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UserActivity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUserActivity}, {
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_KeyboardInput.base,
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_ApplicationWindow.base,
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_MouseInput.base,}};

static void InitDefaultsKeyboardInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::type::_KeyboardInput_default_instance_;
    new (ptr) ::ssigmaapi::type::KeyboardInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::type::KeyboardInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyboardInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyboardInput}, {}};

static void InitDefaultsMouseInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::type::_MouseInput_default_instance_;
    new (ptr) ::ssigmaapi::type::MouseInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::type::MouseInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MouseInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMouseInput}, {}};

static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::type::_Point_default_instance_;
    new (ptr) ::ssigmaapi::type::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::type::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsApplicationWindow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::type::_ApplicationWindow_default_instance_;
    new (ptr) ::ssigmaapi::type::ApplicationWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::type::ApplicationWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ApplicationWindow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApplicationWindow}, {
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_Point.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserActivity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyboardInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MouseInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApplicationWindow.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, end_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, keyboard_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, window_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, user_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, mouse_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::UserActivity, switch_application_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::KeyboardInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::KeyboardInput, stroke_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::MouseInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::MouseInput, click_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::MouseInput, left_click_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::MouseInput, middle_click_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::MouseInput, right_click_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::Point, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, lefttop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, program_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, company_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, is_foreground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, window_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::type::ApplicationWindow, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ssigmaapi::type::UserActivity)},
  { 12, -1, sizeof(::ssigmaapi::type::KeyboardInput)},
  { 18, -1, sizeof(::ssigmaapi::type::MouseInput)},
  { 27, -1, sizeof(::ssigmaapi::type::Point)},
  { 34, -1, sizeof(::ssigmaapi::type::ApplicationWindow)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::type::_UserActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::type::_KeyboardInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::type::_MouseInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::type::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::type::_ApplicationWindow_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssigmaapi/type/useractivity.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!ssigmaapi/type/useractivity.proto\022\016ssi"
      "gmaapi.type\"\340\002\n\014UserActivity\022\027\n\017start_ti"
      "mestamp\030\001 \001(\003\022\025\n\rend_timestamp\030\002 \001(\003\0225\n\016"
      "keyboard_input\030\003 \001(\0132\035.ssigmaapi.type.Ke"
      "yboardInput\0226\n\013window_list\030\004 \003(\0132!.ssigm"
      "aapi.type.ApplicationWindow\022:\n\nuser_stat"
      "e\030\005 \001(\0162&.ssigmaapi.type.UserActivity.Us"
      "erState\022/\n\013mouse_input\030\006 \001(\0132\032.ssigmaapi"
      ".type.MouseInput\022 \n\030switch_application_c"
      "ount\030\007 \001(\003\"\"\n\tUserState\022\013\n\007WORKING\020\000\022\010\n\004"
      "AWAY\020\001\"%\n\rKeyboardInput\022\024\n\014stroke_count\030"
      "\001 \001(\003\"r\n\nMouseInput\022\023\n\013click_count\030\001 \001(\003"
      "\022\030\n\020left_click_count\030\002 \001(\003\022\032\n\022middle_cli"
      "ck_count\030\003 \001(\003\022\031\n\021right_click_count\030\004 \001("
      "\003\"\035\n\005Point\022\t\n\001x\030\001 \001(\003\022\t\n\001y\030\002 \001(\003\"\315\002\n\021App"
      "licationWindow\022&\n\007lefttop\030\001 \001(\0132\025.ssigma"
      "api.type.Point\022\016\n\006height\030\002 \001(\003\022\r\n\005width\030"
      "\003 \001(\003\022\r\n\005title\030\004 \001(\t\022\024\n\014program_name\030\005 \001"
      "(\t\022\023\n\013description\030\006 \001(\t\022\017\n\007company\030\007 \001(\t"
      "\022\025\n\ris_foreground\030\010 \001(\010\022C\n\014window_state\030"
      "\t \001(\0162-.ssigmaapi.type.ApplicationWindow"
      ".WindowState\022\021\n\ttimestamp\030\n \001(\003\"7\n\013Windo"
      "wState\022\n\n\006NORMAL\020\000\022\r\n\tMAXIMIZED\020\001\022\r\n\tMIN"
      "IMIZED\020\002B>Z<github.com/kaito2/ssigmaapig"
      "o/type/useractivity;useractivityb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1000);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssigmaapi/type/useractivity.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto
namespace ssigmaapi {
namespace type {
const ::google::protobuf::EnumDescriptor* UserActivity_UserState_descriptor() {
  protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_enum_descriptors[0];
}
bool UserActivity_UserState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserActivity_UserState UserActivity::WORKING;
const UserActivity_UserState UserActivity::AWAY;
const UserActivity_UserState UserActivity::UserState_MIN;
const UserActivity_UserState UserActivity::UserState_MAX;
const int UserActivity::UserState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ApplicationWindow_WindowState_descriptor() {
  protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_enum_descriptors[1];
}
bool ApplicationWindow_WindowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ApplicationWindow_WindowState ApplicationWindow::NORMAL;
const ApplicationWindow_WindowState ApplicationWindow::MAXIMIZED;
const ApplicationWindow_WindowState ApplicationWindow::MINIMIZED;
const ApplicationWindow_WindowState ApplicationWindow::WindowState_MIN;
const ApplicationWindow_WindowState ApplicationWindow::WindowState_MAX;
const int ApplicationWindow::WindowState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void UserActivity::InitAsDefaultInstance() {
  ::ssigmaapi::type::_UserActivity_default_instance_._instance.get_mutable()->keyboard_input_ = const_cast< ::ssigmaapi::type::KeyboardInput*>(
      ::ssigmaapi::type::KeyboardInput::internal_default_instance());
  ::ssigmaapi::type::_UserActivity_default_instance_._instance.get_mutable()->mouse_input_ = const_cast< ::ssigmaapi::type::MouseInput*>(
      ::ssigmaapi::type::MouseInput::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserActivity::kStartTimestampFieldNumber;
const int UserActivity::kEndTimestampFieldNumber;
const int UserActivity::kKeyboardInputFieldNumber;
const int UserActivity::kWindowListFieldNumber;
const int UserActivity::kUserStateFieldNumber;
const int UserActivity::kMouseInputFieldNumber;
const int UserActivity::kSwitchApplicationCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserActivity::UserActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_UserActivity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.type.UserActivity)
}
UserActivity::UserActivity(const UserActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      window_list_(from.window_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keyboard_input()) {
    keyboard_input_ = new ::ssigmaapi::type::KeyboardInput(*from.keyboard_input_);
  } else {
    keyboard_input_ = NULL;
  }
  if (from.has_mouse_input()) {
    mouse_input_ = new ::ssigmaapi::type::MouseInput(*from.mouse_input_);
  } else {
    mouse_input_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_state_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(user_state_));
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.type.UserActivity)
}

void UserActivity::SharedCtor() {
  ::memset(&keyboard_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_state_) -
      reinterpret_cast<char*>(&keyboard_input_)) + sizeof(user_state_));
}

UserActivity::~UserActivity() {
  // @@protoc_insertion_point(destructor:ssigmaapi.type.UserActivity)
  SharedDtor();
}

void UserActivity::SharedDtor() {
  if (this != internal_default_instance()) delete keyboard_input_;
  if (this != internal_default_instance()) delete mouse_input_;
}

void UserActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserActivity::descriptor() {
  ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserActivity& UserActivity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_UserActivity.base);
  return *internal_default_instance();
}


void UserActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.type.UserActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  window_list_.Clear();
  if (GetArenaNoVirtual() == NULL && keyboard_input_ != NULL) {
    delete keyboard_input_;
  }
  keyboard_input_ = NULL;
  if (GetArenaNoVirtual() == NULL && mouse_input_ != NULL) {
    delete mouse_input_;
  }
  mouse_input_ = NULL;
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_state_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(user_state_));
  _internal_metadata_.Clear();
}

bool UserActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.type.UserActivity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ssigmaapi.type.KeyboardInput keyboard_input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_keyboard_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssigmaapi.type.ApplicationWindow window_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_window_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ssigmaapi.type.UserActivity.UserState user_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_user_state(static_cast< ::ssigmaapi::type::UserActivity_UserState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ssigmaapi.type.MouseInput mouse_input = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mouse_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 switch_application_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &switch_application_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.type.UserActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.type.UserActivity)
  return false;
#undef DO_
}

void UserActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.type.UserActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp(), output);
  }

  // int64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_timestamp(), output);
  }

  // .ssigmaapi.type.KeyboardInput keyboard_input = 3;
  if (this->has_keyboard_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_keyboard_input(), output);
  }

  // repeated .ssigmaapi.type.ApplicationWindow window_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->window_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->window_list(static_cast<int>(i)),
      output);
  }

  // .ssigmaapi.type.UserActivity.UserState user_state = 5;
  if (this->user_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->user_state(), output);
  }

  // .ssigmaapi.type.MouseInput mouse_input = 6;
  if (this->has_mouse_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_mouse_input(), output);
  }

  // int64 switch_application_count = 7;
  if (this->switch_application_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->switch_application_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.type.UserActivity)
}

::google::protobuf::uint8* UserActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.type.UserActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_timestamp(), target);
  }

  // int64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_timestamp(), target);
  }

  // .ssigmaapi.type.KeyboardInput keyboard_input = 3;
  if (this->has_keyboard_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_keyboard_input(), deterministic, target);
  }

  // repeated .ssigmaapi.type.ApplicationWindow window_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->window_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->window_list(static_cast<int>(i)), deterministic, target);
  }

  // .ssigmaapi.type.UserActivity.UserState user_state = 5;
  if (this->user_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->user_state(), target);
  }

  // .ssigmaapi.type.MouseInput mouse_input = 6;
  if (this->has_mouse_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_mouse_input(), deterministic, target);
  }

  // int64 switch_application_count = 7;
  if (this->switch_application_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->switch_application_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.type.UserActivity)
  return target;
}

size_t UserActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.type.UserActivity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ssigmaapi.type.ApplicationWindow window_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->window_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->window_list(static_cast<int>(i)));
    }
  }

  // .ssigmaapi.type.KeyboardInput keyboard_input = 3;
  if (this->has_keyboard_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *keyboard_input_);
  }

  // .ssigmaapi.type.MouseInput mouse_input = 6;
  if (this->has_mouse_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mouse_input_);
  }

  // int64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_timestamp());
  }

  // int64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_timestamp());
  }

  // int64 switch_application_count = 7;
  if (this->switch_application_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->switch_application_count());
  }

  // .ssigmaapi.type.UserActivity.UserState user_state = 5;
  if (this->user_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.type.UserActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const UserActivity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.type.UserActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.type.UserActivity)
    MergeFrom(*source);
  }
}

void UserActivity::MergeFrom(const UserActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.type.UserActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  window_list_.MergeFrom(from.window_list_);
  if (from.has_keyboard_input()) {
    mutable_keyboard_input()->::ssigmaapi::type::KeyboardInput::MergeFrom(from.keyboard_input());
  }
  if (from.has_mouse_input()) {
    mutable_mouse_input()->::ssigmaapi::type::MouseInput::MergeFrom(from.mouse_input());
  }
  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  if (from.end_timestamp() != 0) {
    set_end_timestamp(from.end_timestamp());
  }
  if (from.switch_application_count() != 0) {
    set_switch_application_count(from.switch_application_count());
  }
  if (from.user_state() != 0) {
    set_user_state(from.user_state());
  }
}

void UserActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.type.UserActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserActivity::CopyFrom(const UserActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.type.UserActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserActivity::IsInitialized() const {
  return true;
}

void UserActivity::Swap(UserActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserActivity::InternalSwap(UserActivity* other) {
  using std::swap;
  CastToBase(&window_list_)->InternalSwap(CastToBase(&other->window_list_));
  swap(keyboard_input_, other->keyboard_input_);
  swap(mouse_input_, other->mouse_input_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(switch_application_count_, other->switch_application_count_);
  swap(user_state_, other->user_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserActivity::GetMetadata() const {
  protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyboardInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyboardInput::kStrokeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyboardInput::KeyboardInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_KeyboardInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.type.KeyboardInput)
}
KeyboardInput::KeyboardInput(const KeyboardInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stroke_count_ = from.stroke_count_;
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.type.KeyboardInput)
}

void KeyboardInput::SharedCtor() {
  stroke_count_ = GOOGLE_LONGLONG(0);
}

KeyboardInput::~KeyboardInput() {
  // @@protoc_insertion_point(destructor:ssigmaapi.type.KeyboardInput)
  SharedDtor();
}

void KeyboardInput::SharedDtor() {
}

void KeyboardInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyboardInput::descriptor() {
  ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyboardInput& KeyboardInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_KeyboardInput.base);
  return *internal_default_instance();
}


void KeyboardInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.type.KeyboardInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stroke_count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool KeyboardInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.type.KeyboardInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 stroke_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stroke_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.type.KeyboardInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.type.KeyboardInput)
  return false;
#undef DO_
}

void KeyboardInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.type.KeyboardInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 stroke_count = 1;
  if (this->stroke_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stroke_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.type.KeyboardInput)
}

::google::protobuf::uint8* KeyboardInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.type.KeyboardInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 stroke_count = 1;
  if (this->stroke_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stroke_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.type.KeyboardInput)
  return target;
}

size_t KeyboardInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.type.KeyboardInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 stroke_count = 1;
  if (this->stroke_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stroke_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyboardInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.type.KeyboardInput)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyboardInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyboardInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.type.KeyboardInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.type.KeyboardInput)
    MergeFrom(*source);
  }
}

void KeyboardInput::MergeFrom(const KeyboardInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.type.KeyboardInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stroke_count() != 0) {
    set_stroke_count(from.stroke_count());
  }
}

void KeyboardInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.type.KeyboardInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyboardInput::CopyFrom(const KeyboardInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.type.KeyboardInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyboardInput::IsInitialized() const {
  return true;
}

void KeyboardInput::Swap(KeyboardInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyboardInput::InternalSwap(KeyboardInput* other) {
  using std::swap;
  swap(stroke_count_, other->stroke_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyboardInput::GetMetadata() const {
  protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MouseInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MouseInput::kClickCountFieldNumber;
const int MouseInput::kLeftClickCountFieldNumber;
const int MouseInput::kMiddleClickCountFieldNumber;
const int MouseInput::kRightClickCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MouseInput::MouseInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_MouseInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.type.MouseInput)
}
MouseInput::MouseInput(const MouseInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&click_count_, &from.click_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_click_count_) -
    reinterpret_cast<char*>(&click_count_)) + sizeof(right_click_count_));
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.type.MouseInput)
}

void MouseInput::SharedCtor() {
  ::memset(&click_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_click_count_) -
      reinterpret_cast<char*>(&click_count_)) + sizeof(right_click_count_));
}

MouseInput::~MouseInput() {
  // @@protoc_insertion_point(destructor:ssigmaapi.type.MouseInput)
  SharedDtor();
}

void MouseInput::SharedDtor() {
}

void MouseInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MouseInput::descriptor() {
  ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MouseInput& MouseInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_MouseInput.base);
  return *internal_default_instance();
}


void MouseInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.type.MouseInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&click_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_click_count_) -
      reinterpret_cast<char*>(&click_count_)) + sizeof(right_click_count_));
  _internal_metadata_.Clear();
}

bool MouseInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.type.MouseInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 click_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &click_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 left_click_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &left_click_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 middle_click_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &middle_click_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 right_click_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &right_click_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.type.MouseInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.type.MouseInput)
  return false;
#undef DO_
}

void MouseInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.type.MouseInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 click_count = 1;
  if (this->click_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->click_count(), output);
  }

  // int64 left_click_count = 2;
  if (this->left_click_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->left_click_count(), output);
  }

  // int64 middle_click_count = 3;
  if (this->middle_click_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->middle_click_count(), output);
  }

  // int64 right_click_count = 4;
  if (this->right_click_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->right_click_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.type.MouseInput)
}

::google::protobuf::uint8* MouseInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.type.MouseInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 click_count = 1;
  if (this->click_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->click_count(), target);
  }

  // int64 left_click_count = 2;
  if (this->left_click_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->left_click_count(), target);
  }

  // int64 middle_click_count = 3;
  if (this->middle_click_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->middle_click_count(), target);
  }

  // int64 right_click_count = 4;
  if (this->right_click_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->right_click_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.type.MouseInput)
  return target;
}

size_t MouseInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.type.MouseInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 click_count = 1;
  if (this->click_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->click_count());
  }

  // int64 left_click_count = 2;
  if (this->left_click_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->left_click_count());
  }

  // int64 middle_click_count = 3;
  if (this->middle_click_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->middle_click_count());
  }

  // int64 right_click_count = 4;
  if (this->right_click_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->right_click_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.type.MouseInput)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MouseInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.type.MouseInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.type.MouseInput)
    MergeFrom(*source);
  }
}

void MouseInput::MergeFrom(const MouseInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.type.MouseInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.click_count() != 0) {
    set_click_count(from.click_count());
  }
  if (from.left_click_count() != 0) {
    set_left_click_count(from.left_click_count());
  }
  if (from.middle_click_count() != 0) {
    set_middle_click_count(from.middle_click_count());
  }
  if (from.right_click_count() != 0) {
    set_right_click_count(from.right_click_count());
  }
}

void MouseInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.type.MouseInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseInput::CopyFrom(const MouseInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.type.MouseInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseInput::IsInitialized() const {
  return true;
}

void MouseInput::Swap(MouseInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MouseInput::InternalSwap(MouseInput* other) {
  using std::swap;
  swap(click_count_, other->click_count_);
  swap(left_click_count_, other->left_click_count_);
  swap(middle_click_count_, other->middle_click_count_);
  swap(right_click_count_, other->right_click_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MouseInput::GetMetadata() const {
  protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.type.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.type.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ssigmaapi.type.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.type.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.type.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.type.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.type.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.type.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->x(), output);
  }

  // int64 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.type.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.type.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->x(), target);
  }

  // int64 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.type.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.type.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x());
  }

  // int64 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.type.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.type.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.type.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.type.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.type.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.type.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ApplicationWindow::InitAsDefaultInstance() {
  ::ssigmaapi::type::_ApplicationWindow_default_instance_._instance.get_mutable()->lefttop_ = const_cast< ::ssigmaapi::type::Point*>(
      ::ssigmaapi::type::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplicationWindow::kLefttopFieldNumber;
const int ApplicationWindow::kHeightFieldNumber;
const int ApplicationWindow::kWidthFieldNumber;
const int ApplicationWindow::kTitleFieldNumber;
const int ApplicationWindow::kProgramNameFieldNumber;
const int ApplicationWindow::kDescriptionFieldNumber;
const int ApplicationWindow::kCompanyFieldNumber;
const int ApplicationWindow::kIsForegroundFieldNumber;
const int ApplicationWindow::kWindowStateFieldNumber;
const int ApplicationWindow::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplicationWindow::ApplicationWindow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_ApplicationWindow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.type.ApplicationWindow)
}
ApplicationWindow::ApplicationWindow(const ApplicationWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  program_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.program_name().size() > 0) {
    program_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.program_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.company().size() > 0) {
    company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
  }
  if (from.has_lefttop()) {
    lefttop_ = new ::ssigmaapi::type::Point(*from.lefttop_);
  } else {
    lefttop_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.type.ApplicationWindow)
}

void ApplicationWindow::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lefttop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&lefttop_)) + sizeof(timestamp_));
}

ApplicationWindow::~ApplicationWindow() {
  // @@protoc_insertion_point(destructor:ssigmaapi.type.ApplicationWindow)
  SharedDtor();
}

void ApplicationWindow::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lefttop_;
}

void ApplicationWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ApplicationWindow::descriptor() {
  ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplicationWindow& ApplicationWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::scc_info_ApplicationWindow.base);
  return *internal_default_instance();
}


void ApplicationWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.type.ApplicationWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && lefttop_ != NULL) {
    delete lefttop_;
  }
  lefttop_ = NULL;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool ApplicationWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.type.ApplicationWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ssigmaapi.type.Point lefttop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lefttop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.ApplicationWindow.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string program_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_program_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->program_name().data(), static_cast<int>(this->program_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.ApplicationWindow.program_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.ApplicationWindow.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string company = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->company().data(), static_cast<int>(this->company().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.ApplicationWindow.company"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_foreground = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_foreground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ssigmaapi.type.ApplicationWindow.WindowState window_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_window_state(static_cast< ::ssigmaapi::type::ApplicationWindow_WindowState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.type.ApplicationWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.type.ApplicationWindow)
  return false;
#undef DO_
}

void ApplicationWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.type.ApplicationWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.type.Point lefttop = 1;
  if (this->has_lefttop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_lefttop(), output);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  // int64 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->width(), output);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // string program_name = 5;
  if (this->program_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->program_name().data(), static_cast<int>(this->program_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.program_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->program_name(), output);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // string company = 7;
  if (this->company().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company().data(), static_cast<int>(this->company().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->company(), output);
  }

  // bool is_foreground = 8;
  if (this->is_foreground() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_foreground(), output);
  }

  // .ssigmaapi.type.ApplicationWindow.WindowState window_state = 9;
  if (this->window_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->window_state(), output);
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.type.ApplicationWindow)
}

::google::protobuf::uint8* ApplicationWindow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.type.ApplicationWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.type.Point lefttop = 1;
  if (this->has_lefttop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_lefttop(), deterministic, target);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  // int64 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->width(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // string program_name = 5;
  if (this->program_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->program_name().data(), static_cast<int>(this->program_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.program_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->program_name(), target);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // string company = 7;
  if (this->company().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company().data(), static_cast<int>(this->company().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.ApplicationWindow.company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->company(), target);
  }

  // bool is_foreground = 8;
  if (this->is_foreground() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_foreground(), target);
  }

  // .ssigmaapi.type.ApplicationWindow.WindowState window_state = 9;
  if (this->window_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->window_state(), target);
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.type.ApplicationWindow)
  return target;
}

size_t ApplicationWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.type.ApplicationWindow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string program_name = 5;
  if (this->program_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->program_name());
  }

  // string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string company = 7;
  if (this->company().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company());
  }

  // .ssigmaapi.type.Point lefttop = 1;
  if (this->has_lefttop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lefttop_);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->width());
  }

  // bool is_foreground = 8;
  if (this->is_foreground() != 0) {
    total_size += 1 + 1;
  }

  // .ssigmaapi.type.ApplicationWindow.WindowState window_state = 9;
  if (this->window_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->window_state());
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.type.ApplicationWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationWindow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplicationWindow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.type.ApplicationWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.type.ApplicationWindow)
    MergeFrom(*source);
  }
}

void ApplicationWindow::MergeFrom(const ApplicationWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.type.ApplicationWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.program_name().size() > 0) {

    program_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.program_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.company().size() > 0) {

    company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
  }
  if (from.has_lefttop()) {
    mutable_lefttop()->::ssigmaapi::type::Point::MergeFrom(from.lefttop());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.is_foreground() != 0) {
    set_is_foreground(from.is_foreground());
  }
  if (from.window_state() != 0) {
    set_window_state(from.window_state());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ApplicationWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.type.ApplicationWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationWindow::CopyFrom(const ApplicationWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.type.ApplicationWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationWindow::IsInitialized() const {
  return true;
}

void ApplicationWindow::Swap(ApplicationWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplicationWindow::InternalSwap(ApplicationWindow* other) {
  using std::swap;
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_name_.Swap(&other->program_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_.Swap(&other->company_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lefttop_, other->lefttop_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(is_foreground_, other->is_foreground_);
  swap(window_state_, other->window_state_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ApplicationWindow::GetMetadata() const {
  protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace ssigmaapi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::type::UserActivity* Arena::CreateMaybeMessage< ::ssigmaapi::type::UserActivity >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::type::UserActivity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::type::KeyboardInput* Arena::CreateMaybeMessage< ::ssigmaapi::type::KeyboardInput >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::type::KeyboardInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::type::MouseInput* Arena::CreateMaybeMessage< ::ssigmaapi::type::MouseInput >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::type::MouseInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::type::Point* Arena::CreateMaybeMessage< ::ssigmaapi::type::Point >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::type::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::type::ApplicationWindow* Arena::CreateMaybeMessage< ::ssigmaapi::type::ApplicationWindow >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::type::ApplicationWindow >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
