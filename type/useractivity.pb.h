// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssigmaapi/type/useractivity.proto

#ifndef PROTOBUF_INCLUDED_ssigmaapi_2ftype_2fuseractivity_2eproto
#define PROTOBUF_INCLUDED_ssigmaapi_2ftype_2fuseractivity_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto 

namespace protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto
namespace ssigmaapi {
namespace type {
class ApplicationWindow;
class ApplicationWindowDefaultTypeInternal;
extern ApplicationWindowDefaultTypeInternal _ApplicationWindow_default_instance_;
class KeyboardInput;
class KeyboardInputDefaultTypeInternal;
extern KeyboardInputDefaultTypeInternal _KeyboardInput_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class UserActivity;
class UserActivityDefaultTypeInternal;
extern UserActivityDefaultTypeInternal _UserActivity_default_instance_;
}  // namespace type
}  // namespace ssigmaapi
namespace google {
namespace protobuf {
template<> ::ssigmaapi::type::ApplicationWindow* Arena::CreateMaybeMessage<::ssigmaapi::type::ApplicationWindow>(Arena*);
template<> ::ssigmaapi::type::KeyboardInput* Arena::CreateMaybeMessage<::ssigmaapi::type::KeyboardInput>(Arena*);
template<> ::ssigmaapi::type::Point* Arena::CreateMaybeMessage<::ssigmaapi::type::Point>(Arena*);
template<> ::ssigmaapi::type::UserActivity* Arena::CreateMaybeMessage<::ssigmaapi::type::UserActivity>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssigmaapi {
namespace type {

enum ApplicationWindow_WindowState {
  ApplicationWindow_WindowState_NORMAL = 0,
  ApplicationWindow_WindowState_MAXIMIZED = 1,
  ApplicationWindow_WindowState_MINIMIZED = 2,
  ApplicationWindow_WindowState_ApplicationWindow_WindowState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ApplicationWindow_WindowState_ApplicationWindow_WindowState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ApplicationWindow_WindowState_IsValid(int value);
const ApplicationWindow_WindowState ApplicationWindow_WindowState_WindowState_MIN = ApplicationWindow_WindowState_NORMAL;
const ApplicationWindow_WindowState ApplicationWindow_WindowState_WindowState_MAX = ApplicationWindow_WindowState_MINIMIZED;
const int ApplicationWindow_WindowState_WindowState_ARRAYSIZE = ApplicationWindow_WindowState_WindowState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplicationWindow_WindowState_descriptor();
inline const ::std::string& ApplicationWindow_WindowState_Name(ApplicationWindow_WindowState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplicationWindow_WindowState_descriptor(), value);
}
inline bool ApplicationWindow_WindowState_Parse(
    const ::std::string& name, ApplicationWindow_WindowState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplicationWindow_WindowState>(
    ApplicationWindow_WindowState_descriptor(), name, value);
}
// ===================================================================

class UserActivity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssigmaapi.type.UserActivity) */ {
 public:
  UserActivity();
  virtual ~UserActivity();

  UserActivity(const UserActivity& from);

  inline UserActivity& operator=(const UserActivity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserActivity(UserActivity&& from) noexcept
    : UserActivity() {
    *this = ::std::move(from);
  }

  inline UserActivity& operator=(UserActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserActivity* internal_default_instance() {
    return reinterpret_cast<const UserActivity*>(
               &_UserActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserActivity* other);
  friend void swap(UserActivity& a, UserActivity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserActivity* New() const final {
    return CreateMaybeMessage<UserActivity>(NULL);
  }

  UserActivity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserActivity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserActivity& from);
  void MergeFrom(const UserActivity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssigmaapi.type.ApplicationWindow window_list = 4;
  int window_list_size() const;
  void clear_window_list();
  static const int kWindowListFieldNumber = 4;
  ::ssigmaapi::type::ApplicationWindow* mutable_window_list(int index);
  ::google::protobuf::RepeatedPtrField< ::ssigmaapi::type::ApplicationWindow >*
      mutable_window_list();
  const ::ssigmaapi::type::ApplicationWindow& window_list(int index) const;
  ::ssigmaapi::type::ApplicationWindow* add_window_list();
  const ::google::protobuf::RepeatedPtrField< ::ssigmaapi::type::ApplicationWindow >&
      window_list() const;

  // .ssigmaapi.type.KeyboardInput keyboard_input = 3;
  bool has_keyboard_input() const;
  void clear_keyboard_input();
  static const int kKeyboardInputFieldNumber = 3;
  private:
  const ::ssigmaapi::type::KeyboardInput& _internal_keyboard_input() const;
  public:
  const ::ssigmaapi::type::KeyboardInput& keyboard_input() const;
  ::ssigmaapi::type::KeyboardInput* release_keyboard_input();
  ::ssigmaapi::type::KeyboardInput* mutable_keyboard_input();
  void set_allocated_keyboard_input(::ssigmaapi::type::KeyboardInput* keyboard_input);

  // int64 start_timestamp = 1;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 1;
  ::google::protobuf::int64 start_timestamp() const;
  void set_start_timestamp(::google::protobuf::int64 value);

  // int64 end_timestamp = 2;
  void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 2;
  ::google::protobuf::int64 end_timestamp() const;
  void set_end_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ssigmaapi.type.UserActivity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ssigmaapi::type::ApplicationWindow > window_list_;
  ::ssigmaapi::type::KeyboardInput* keyboard_input_;
  ::google::protobuf::int64 start_timestamp_;
  ::google::protobuf::int64 end_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyboardInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssigmaapi.type.KeyboardInput) */ {
 public:
  KeyboardInput();
  virtual ~KeyboardInput();

  KeyboardInput(const KeyboardInput& from);

  inline KeyboardInput& operator=(const KeyboardInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyboardInput(KeyboardInput&& from) noexcept
    : KeyboardInput() {
    *this = ::std::move(from);
  }

  inline KeyboardInput& operator=(KeyboardInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyboardInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyboardInput* internal_default_instance() {
    return reinterpret_cast<const KeyboardInput*>(
               &_KeyboardInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KeyboardInput* other);
  friend void swap(KeyboardInput& a, KeyboardInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyboardInput* New() const final {
    return CreateMaybeMessage<KeyboardInput>(NULL);
  }

  KeyboardInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyboardInput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyboardInput& from);
  void MergeFrom(const KeyboardInput& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyboardInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 stroke_count = 1;
  void clear_stroke_count();
  static const int kStrokeCountFieldNumber = 1;
  ::google::protobuf::int64 stroke_count() const;
  void set_stroke_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ssigmaapi.type.KeyboardInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 stroke_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssigmaapi.type.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int64 x() const;
  void set_x(::google::protobuf::int64 value);

  // int64 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int64 y() const;
  void set_y(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ssigmaapi.type.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 x_;
  ::google::protobuf::int64 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ApplicationWindow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssigmaapi.type.ApplicationWindow) */ {
 public:
  ApplicationWindow();
  virtual ~ApplicationWindow();

  ApplicationWindow(const ApplicationWindow& from);

  inline ApplicationWindow& operator=(const ApplicationWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplicationWindow(ApplicationWindow&& from) noexcept
    : ApplicationWindow() {
    *this = ::std::move(from);
  }

  inline ApplicationWindow& operator=(ApplicationWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplicationWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationWindow* internal_default_instance() {
    return reinterpret_cast<const ApplicationWindow*>(
               &_ApplicationWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ApplicationWindow* other);
  friend void swap(ApplicationWindow& a, ApplicationWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplicationWindow* New() const final {
    return CreateMaybeMessage<ApplicationWindow>(NULL);
  }

  ApplicationWindow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationWindow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApplicationWindow& from);
  void MergeFrom(const ApplicationWindow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ApplicationWindow_WindowState WindowState;
  static const WindowState NORMAL =
    ApplicationWindow_WindowState_NORMAL;
  static const WindowState MAXIMIZED =
    ApplicationWindow_WindowState_MAXIMIZED;
  static const WindowState MINIMIZED =
    ApplicationWindow_WindowState_MINIMIZED;
  static inline bool WindowState_IsValid(int value) {
    return ApplicationWindow_WindowState_IsValid(value);
  }
  static const WindowState WindowState_MIN =
    ApplicationWindow_WindowState_WindowState_MIN;
  static const WindowState WindowState_MAX =
    ApplicationWindow_WindowState_WindowState_MAX;
  static const int WindowState_ARRAYSIZE =
    ApplicationWindow_WindowState_WindowState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WindowState_descriptor() {
    return ApplicationWindow_WindowState_descriptor();
  }
  static inline const ::std::string& WindowState_Name(WindowState value) {
    return ApplicationWindow_WindowState_Name(value);
  }
  static inline bool WindowState_Parse(const ::std::string& name,
      WindowState* value) {
    return ApplicationWindow_WindowState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string title = 4;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string program_name = 5;
  void clear_program_name();
  static const int kProgramNameFieldNumber = 5;
  const ::std::string& program_name() const;
  void set_program_name(const ::std::string& value);
  #if LANG_CXX11
  void set_program_name(::std::string&& value);
  #endif
  void set_program_name(const char* value);
  void set_program_name(const char* value, size_t size);
  ::std::string* mutable_program_name();
  ::std::string* release_program_name();
  void set_allocated_program_name(::std::string* program_name);

  // string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string company = 7;
  void clear_company();
  static const int kCompanyFieldNumber = 7;
  const ::std::string& company() const;
  void set_company(const ::std::string& value);
  #if LANG_CXX11
  void set_company(::std::string&& value);
  #endif
  void set_company(const char* value);
  void set_company(const char* value, size_t size);
  ::std::string* mutable_company();
  ::std::string* release_company();
  void set_allocated_company(::std::string* company);

  // .ssigmaapi.type.Point lefttop = 1;
  bool has_lefttop() const;
  void clear_lefttop();
  static const int kLefttopFieldNumber = 1;
  private:
  const ::ssigmaapi::type::Point& _internal_lefttop() const;
  public:
  const ::ssigmaapi::type::Point& lefttop() const;
  ::ssigmaapi::type::Point* release_lefttop();
  ::ssigmaapi::type::Point* mutable_lefttop();
  void set_allocated_lefttop(::ssigmaapi::type::Point* lefttop);

  // int64 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // int64 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int64 width() const;
  void set_width(::google::protobuf::int64 value);

  // bool is_foreground = 8;
  void clear_is_foreground();
  static const int kIsForegroundFieldNumber = 8;
  bool is_foreground() const;
  void set_is_foreground(bool value);

  // .ssigmaapi.type.ApplicationWindow.WindowState window_state = 9;
  void clear_window_state();
  static const int kWindowStateFieldNumber = 9;
  ::ssigmaapi::type::ApplicationWindow_WindowState window_state() const;
  void set_window_state(::ssigmaapi::type::ApplicationWindow_WindowState value);

  // int64 timestamp = 10;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ssigmaapi.type.ApplicationWindow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr program_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr company_;
  ::ssigmaapi::type::Point* lefttop_;
  ::google::protobuf::int64 height_;
  ::google::protobuf::int64 width_;
  bool is_foreground_;
  int window_state_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ssigmaapi_2ftype_2fuseractivity_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserActivity

// int64 start_timestamp = 1;
inline void UserActivity::clear_start_timestamp() {
  start_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserActivity::start_timestamp() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.UserActivity.start_timestamp)
  return start_timestamp_;
}
inline void UserActivity::set_start_timestamp(::google::protobuf::int64 value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.UserActivity.start_timestamp)
}

// int64 end_timestamp = 2;
inline void UserActivity::clear_end_timestamp() {
  end_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserActivity::end_timestamp() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.UserActivity.end_timestamp)
  return end_timestamp_;
}
inline void UserActivity::set_end_timestamp(::google::protobuf::int64 value) {
  
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.UserActivity.end_timestamp)
}

// .ssigmaapi.type.KeyboardInput keyboard_input = 3;
inline bool UserActivity::has_keyboard_input() const {
  return this != internal_default_instance() && keyboard_input_ != NULL;
}
inline void UserActivity::clear_keyboard_input() {
  if (GetArenaNoVirtual() == NULL && keyboard_input_ != NULL) {
    delete keyboard_input_;
  }
  keyboard_input_ = NULL;
}
inline const ::ssigmaapi::type::KeyboardInput& UserActivity::_internal_keyboard_input() const {
  return *keyboard_input_;
}
inline const ::ssigmaapi::type::KeyboardInput& UserActivity::keyboard_input() const {
  const ::ssigmaapi::type::KeyboardInput* p = keyboard_input_;
  // @@protoc_insertion_point(field_get:ssigmaapi.type.UserActivity.keyboard_input)
  return p != NULL ? *p : *reinterpret_cast<const ::ssigmaapi::type::KeyboardInput*>(
      &::ssigmaapi::type::_KeyboardInput_default_instance_);
}
inline ::ssigmaapi::type::KeyboardInput* UserActivity::release_keyboard_input() {
  // @@protoc_insertion_point(field_release:ssigmaapi.type.UserActivity.keyboard_input)
  
  ::ssigmaapi::type::KeyboardInput* temp = keyboard_input_;
  keyboard_input_ = NULL;
  return temp;
}
inline ::ssigmaapi::type::KeyboardInput* UserActivity::mutable_keyboard_input() {
  
  if (keyboard_input_ == NULL) {
    auto* p = CreateMaybeMessage<::ssigmaapi::type::KeyboardInput>(GetArenaNoVirtual());
    keyboard_input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssigmaapi.type.UserActivity.keyboard_input)
  return keyboard_input_;
}
inline void UserActivity::set_allocated_keyboard_input(::ssigmaapi::type::KeyboardInput* keyboard_input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete keyboard_input_;
  }
  if (keyboard_input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      keyboard_input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, keyboard_input, submessage_arena);
    }
    
  } else {
    
  }
  keyboard_input_ = keyboard_input;
  // @@protoc_insertion_point(field_set_allocated:ssigmaapi.type.UserActivity.keyboard_input)
}

// repeated .ssigmaapi.type.ApplicationWindow window_list = 4;
inline int UserActivity::window_list_size() const {
  return window_list_.size();
}
inline void UserActivity::clear_window_list() {
  window_list_.Clear();
}
inline ::ssigmaapi::type::ApplicationWindow* UserActivity::mutable_window_list(int index) {
  // @@protoc_insertion_point(field_mutable:ssigmaapi.type.UserActivity.window_list)
  return window_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssigmaapi::type::ApplicationWindow >*
UserActivity::mutable_window_list() {
  // @@protoc_insertion_point(field_mutable_list:ssigmaapi.type.UserActivity.window_list)
  return &window_list_;
}
inline const ::ssigmaapi::type::ApplicationWindow& UserActivity::window_list(int index) const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.UserActivity.window_list)
  return window_list_.Get(index);
}
inline ::ssigmaapi::type::ApplicationWindow* UserActivity::add_window_list() {
  // @@protoc_insertion_point(field_add:ssigmaapi.type.UserActivity.window_list)
  return window_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssigmaapi::type::ApplicationWindow >&
UserActivity::window_list() const {
  // @@protoc_insertion_point(field_list:ssigmaapi.type.UserActivity.window_list)
  return window_list_;
}

// -------------------------------------------------------------------

// KeyboardInput

// int64 stroke_count = 1;
inline void KeyboardInput::clear_stroke_count() {
  stroke_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KeyboardInput::stroke_count() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.KeyboardInput.stroke_count)
  return stroke_count_;
}
inline void KeyboardInput::set_stroke_count(::google::protobuf::int64 value) {
  
  stroke_count_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.KeyboardInput.stroke_count)
}

// -------------------------------------------------------------------

// Point

// int64 x = 1;
inline void Point::clear_x() {
  x_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Point::x() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int64 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.Point.x)
}

// int64 y = 2;
inline void Point::clear_y() {
  y_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Point::y() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int64 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.Point.y)
}

// -------------------------------------------------------------------

// ApplicationWindow

// .ssigmaapi.type.Point lefttop = 1;
inline bool ApplicationWindow::has_lefttop() const {
  return this != internal_default_instance() && lefttop_ != NULL;
}
inline void ApplicationWindow::clear_lefttop() {
  if (GetArenaNoVirtual() == NULL && lefttop_ != NULL) {
    delete lefttop_;
  }
  lefttop_ = NULL;
}
inline const ::ssigmaapi::type::Point& ApplicationWindow::_internal_lefttop() const {
  return *lefttop_;
}
inline const ::ssigmaapi::type::Point& ApplicationWindow::lefttop() const {
  const ::ssigmaapi::type::Point* p = lefttop_;
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.lefttop)
  return p != NULL ? *p : *reinterpret_cast<const ::ssigmaapi::type::Point*>(
      &::ssigmaapi::type::_Point_default_instance_);
}
inline ::ssigmaapi::type::Point* ApplicationWindow::release_lefttop() {
  // @@protoc_insertion_point(field_release:ssigmaapi.type.ApplicationWindow.lefttop)
  
  ::ssigmaapi::type::Point* temp = lefttop_;
  lefttop_ = NULL;
  return temp;
}
inline ::ssigmaapi::type::Point* ApplicationWindow::mutable_lefttop() {
  
  if (lefttop_ == NULL) {
    auto* p = CreateMaybeMessage<::ssigmaapi::type::Point>(GetArenaNoVirtual());
    lefttop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssigmaapi.type.ApplicationWindow.lefttop)
  return lefttop_;
}
inline void ApplicationWindow::set_allocated_lefttop(::ssigmaapi::type::Point* lefttop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lefttop_;
  }
  if (lefttop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lefttop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lefttop, submessage_arena);
    }
    
  } else {
    
  }
  lefttop_ = lefttop;
  // @@protoc_insertion_point(field_set_allocated:ssigmaapi.type.ApplicationWindow.lefttop)
}

// int64 height = 2;
inline void ApplicationWindow::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ApplicationWindow::height() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.height)
  return height_;
}
inline void ApplicationWindow::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.height)
}

// int64 width = 3;
inline void ApplicationWindow::clear_width() {
  width_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ApplicationWindow::width() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.width)
  return width_;
}
inline void ApplicationWindow::set_width(::google::protobuf::int64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.width)
}

// string title = 4;
inline void ApplicationWindow::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplicationWindow::title() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.title)
  return title_.GetNoArena();
}
inline void ApplicationWindow::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.title)
}
#if LANG_CXX11
inline void ApplicationWindow::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssigmaapi.type.ApplicationWindow.title)
}
#endif
inline void ApplicationWindow::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssigmaapi.type.ApplicationWindow.title)
}
inline void ApplicationWindow::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssigmaapi.type.ApplicationWindow.title)
}
inline ::std::string* ApplicationWindow::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ssigmaapi.type.ApplicationWindow.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplicationWindow::release_title() {
  // @@protoc_insertion_point(field_release:ssigmaapi.type.ApplicationWindow.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationWindow::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ssigmaapi.type.ApplicationWindow.title)
}

// string program_name = 5;
inline void ApplicationWindow::clear_program_name() {
  program_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplicationWindow::program_name() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.program_name)
  return program_name_.GetNoArena();
}
inline void ApplicationWindow::set_program_name(const ::std::string& value) {
  
  program_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.program_name)
}
#if LANG_CXX11
inline void ApplicationWindow::set_program_name(::std::string&& value) {
  
  program_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssigmaapi.type.ApplicationWindow.program_name)
}
#endif
inline void ApplicationWindow::set_program_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  program_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssigmaapi.type.ApplicationWindow.program_name)
}
inline void ApplicationWindow::set_program_name(const char* value, size_t size) {
  
  program_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssigmaapi.type.ApplicationWindow.program_name)
}
inline ::std::string* ApplicationWindow::mutable_program_name() {
  
  // @@protoc_insertion_point(field_mutable:ssigmaapi.type.ApplicationWindow.program_name)
  return program_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplicationWindow::release_program_name() {
  // @@protoc_insertion_point(field_release:ssigmaapi.type.ApplicationWindow.program_name)
  
  return program_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationWindow::set_allocated_program_name(::std::string* program_name) {
  if (program_name != NULL) {
    
  } else {
    
  }
  program_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), program_name);
  // @@protoc_insertion_point(field_set_allocated:ssigmaapi.type.ApplicationWindow.program_name)
}

// string description = 6;
inline void ApplicationWindow::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplicationWindow::description() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.description)
  return description_.GetNoArena();
}
inline void ApplicationWindow::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.description)
}
#if LANG_CXX11
inline void ApplicationWindow::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssigmaapi.type.ApplicationWindow.description)
}
#endif
inline void ApplicationWindow::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssigmaapi.type.ApplicationWindow.description)
}
inline void ApplicationWindow::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssigmaapi.type.ApplicationWindow.description)
}
inline ::std::string* ApplicationWindow::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ssigmaapi.type.ApplicationWindow.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplicationWindow::release_description() {
  // @@protoc_insertion_point(field_release:ssigmaapi.type.ApplicationWindow.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationWindow::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ssigmaapi.type.ApplicationWindow.description)
}

// string company = 7;
inline void ApplicationWindow::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplicationWindow::company() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.company)
  return company_.GetNoArena();
}
inline void ApplicationWindow::set_company(const ::std::string& value) {
  
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.company)
}
#if LANG_CXX11
inline void ApplicationWindow::set_company(::std::string&& value) {
  
  company_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssigmaapi.type.ApplicationWindow.company)
}
#endif
inline void ApplicationWindow::set_company(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssigmaapi.type.ApplicationWindow.company)
}
inline void ApplicationWindow::set_company(const char* value, size_t size) {
  
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssigmaapi.type.ApplicationWindow.company)
}
inline ::std::string* ApplicationWindow::mutable_company() {
  
  // @@protoc_insertion_point(field_mutable:ssigmaapi.type.ApplicationWindow.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplicationWindow::release_company() {
  // @@protoc_insertion_point(field_release:ssigmaapi.type.ApplicationWindow.company)
  
  return company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationWindow::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    
  } else {
    
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:ssigmaapi.type.ApplicationWindow.company)
}

// bool is_foreground = 8;
inline void ApplicationWindow::clear_is_foreground() {
  is_foreground_ = false;
}
inline bool ApplicationWindow::is_foreground() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.is_foreground)
  return is_foreground_;
}
inline void ApplicationWindow::set_is_foreground(bool value) {
  
  is_foreground_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.is_foreground)
}

// .ssigmaapi.type.ApplicationWindow.WindowState window_state = 9;
inline void ApplicationWindow::clear_window_state() {
  window_state_ = 0;
}
inline ::ssigmaapi::type::ApplicationWindow_WindowState ApplicationWindow::window_state() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.window_state)
  return static_cast< ::ssigmaapi::type::ApplicationWindow_WindowState >(window_state_);
}
inline void ApplicationWindow::set_window_state(::ssigmaapi::type::ApplicationWindow_WindowState value) {
  
  window_state_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.window_state)
}

// int64 timestamp = 10;
inline void ApplicationWindow::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ApplicationWindow::timestamp() const {
  // @@protoc_insertion_point(field_get:ssigmaapi.type.ApplicationWindow.timestamp)
  return timestamp_;
}
inline void ApplicationWindow::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ssigmaapi.type.ApplicationWindow.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace ssigmaapi

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ssigmaapi::type::ApplicationWindow_WindowState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssigmaapi::type::ApplicationWindow_WindowState>() {
  return ::ssigmaapi::type::ApplicationWindow_WindowState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ssigmaapi_2ftype_2fuseractivity_2eproto
