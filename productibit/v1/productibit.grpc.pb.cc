// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ssigmaapi/productibit/v1/productibit.proto

#include "ssigmaapi/productibit/v1/productibit.pb.h"
#include "ssigmaapi/productibit/v1/productibit.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ssigmaapi {
namespace productibit {
namespace v1 {

static const char* ProductibitServiceV1_method_names[] = {
  "/ssigmaapi.productibit.v1.ProductibitServiceV1/UploadSensor",
};

std::unique_ptr< ProductibitServiceV1::Stub> ProductibitServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProductibitServiceV1::Stub> stub(new ProductibitServiceV1::Stub(channel));
  return stub;
}

ProductibitServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UploadSensor_(ProductibitServiceV1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProductibitServiceV1::Stub::UploadSensor(::grpc::ClientContext* context, const ::ssigmaapi::productibit::v1::SensorMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UploadSensor_, context, request, response);
}

void ProductibitServiceV1::Stub::experimental_async::UploadSensor(::grpc::ClientContext* context, const ::ssigmaapi::productibit::v1::SensorMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UploadSensor_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ProductibitServiceV1::Stub::AsyncUploadSensorRaw(::grpc::ClientContext* context, const ::ssigmaapi::productibit::v1::SensorMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UploadSensor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ProductibitServiceV1::Stub::PrepareAsyncUploadSensorRaw(::grpc::ClientContext* context, const ::ssigmaapi::productibit::v1::SensorMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UploadSensor_, context, request, false);
}

ProductibitServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductibitServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductibitServiceV1::Service, ::ssigmaapi::productibit::v1::SensorMessage, ::google::protobuf::Empty>(
          std::mem_fn(&ProductibitServiceV1::Service::UploadSensor), this)));
}

ProductibitServiceV1::Service::~Service() {
}

::grpc::Status ProductibitServiceV1::Service::UploadSensor(::grpc::ServerContext* context, const ::ssigmaapi::productibit::v1::SensorMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ssigmaapi
}  // namespace productibit
}  // namespace v1

